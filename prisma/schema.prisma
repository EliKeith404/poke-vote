// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Pokemon {
    id           Int    @id
    name         String
    spriteUrl    String
    votesFor     Vote[] @relation("votedFor")
    votesAgainst Vote[] @relation("votedAgainst")
}

model Vote {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    submittedById  String?
    submittedBy    User?    @relation(fields: [submittedById], references: [id])
    category       Category
    votedForId     Int
    votedFor       Pokemon  @relation("votedFor", fields: [votedForId], references: [id])
    votedAgainstId Int
    votedAgainst   Pokemon  @relation("votedAgainst", fields: [votedAgainstId], references: [id])

    @@index([submittedById])
    @@index([votedForId])
    @@index([votedAgainstId])
}

model Tournament {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    name         String
    active       Boolean  @default(true)
    winnerId     String?
    winner       User?    @relation("winner", fields: [winnerId], references: [id], onDelete: Cascade)
    participants User[]

    @@index([winnerId])
}

//model UsersInTournament {
//    user         User       @relation(fields: [userId], references: [id])
//    userId       String
//    tournament   Tournament @relation(fields: [tournamentId], references: [id])
//    tournamentId String
//    assignedAt   DateTime   @default(now())

//    @@id([userId, tournamentId])
//    @@index([userId])
//@@index([tournamentId])
//}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String       @id @default(cuid())
    name               String?
    email              String?      @unique
    emailVerified      DateTime?
    image              String?
    role               Role         @default(USER)
    assignedCategory   Category?
    votes              Vote[]
    tournamentsEntered Tournament[]
    tournamentsWon     Tournament[] @relation("winner")
    accounts           Account[]
    sessions           Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}

enum Category {
    roundest
    sharpest
    meanest
    friendliest
    wackiest
    tastiest
    rowdiest
    fanciest
    sneakiest
    smelliest
}
